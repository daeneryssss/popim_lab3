import type { LoadedConfig } from "../../config/config.js";
import type { Processor } from "../../config/validators/BuildSchema.js";
import type { OpenAPIDocument } from "../../lib/oas/parser/index.js";
type ProcessedSchema = {
    schema: OpenAPIDocument;
    version: string;
    inputPath: string;
};
export declare class SchemaManager {
    private storeDir;
    private processors;
    private processedSchemas;
    private fileToNavigationId;
    config: LoadedConfig;
    trackedFiles: Set<string>;
    schemaMap: Map<string, {
        filePath: string;
        processedTime: number;
    }>;
    constructor({ storeDir, config, processors, }: {
        storeDir: string;
        config: LoadedConfig;
        processors: Processor[];
    });
    private getNavigationIdForFile;
    processSchema: (input: string) => Promise<{
        schema: OpenAPIDocument;
        version: string;
        inputPath: string;
    } | undefined>;
    processAllSchemas: () => Promise<void>;
    getLatestSchema: (navigationId: string) => ProcessedSchema | undefined;
    getSchemasForId: (navigationId: string) => ProcessedSchema[] | undefined;
    private validateSchema;
}
export {};

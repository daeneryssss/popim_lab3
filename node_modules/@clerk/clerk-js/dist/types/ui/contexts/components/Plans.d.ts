import type { __experimental_CommercePlanResource, __experimental_CommerceSubscriberType, __experimental_CommerceSubscriptionPlanPeriod, __experimental_CommerceSubscriptionResource } from '@clerk/types';
import type { PropsWithChildren } from 'react';
import type { LocalizationKey } from '../../localization';
export declare const useSubscriptions: (subscriberType?: __experimental_CommerceSubscriberType) => {
    setCache: (state: import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<__experimental_CommerceSubscriptionResource>, any> | ((params: import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<__experimental_CommerceSubscriptionResource>, any>) => import("../../hooks").State<import("@clerk/types").ClerkPaginatedResponse<__experimental_CommerceSubscriptionResource>, any>)) => void;
    invalidate: () => void;
    revalidate: () => void;
    data?: import("@clerk/types").ClerkPaginatedResponse<__experimental_CommerceSubscriptionResource> | null | undefined;
    error?: any;
    isLoading?: boolean | undefined;
    isValidating?: boolean | undefined;
    cachedAt?: number;
};
export declare const PlansContextProvider: ({ children }: PropsWithChildren) => import("@emotion/react/jsx-runtime").JSX.Element;
type HandleSelectPlanProps = {
    plan: __experimental_CommercePlanResource;
    planPeriod: __experimental_CommerceSubscriptionPlanPeriod;
    onSubscriptionChange?: () => void;
    mode?: 'modal' | 'mounted';
    event?: React.MouseEvent<HTMLElement>;
};
export declare const usePlansContext: () => {
    componentName: "Plans";
    activeOrUpcomingSubscription: (plan: __experimental_CommercePlanResource) => __experimental_CommerceSubscriptionResource | undefined;
    isDefaultPlanImplicitlyActive: boolean;
    handleSelectPlan: ({ plan, planPeriod, onSubscriptionChange, mode, event }: HandleSelectPlanProps) => void;
    buttonPropsForPlan: ({ plan, subscription: sub, isCompact, }: {
        plan?: __experimental_CommercePlanResource;
        subscription?: __experimental_CommerceSubscriptionResource;
        isCompact?: boolean;
    }) => {
        localizationKey: LocalizationKey;
        variant: "bordered" | "solid";
        colorScheme: "secondary" | "primary";
    };
    canManageSubscription: ({ plan, subscription: sub, }: {
        plan?: __experimental_CommercePlanResource;
        subscription?: __experimental_CommerceSubscriptionResource;
    }) => boolean;
    captionForSubscription: (subscription: __experimental_CommerceSubscriptionResource) => LocalizationKey;
    defaultFreePlan: __experimental_CommercePlanResource | undefined;
    plans: __experimental_CommercePlanResource[];
    subscriptions: __experimental_CommerceSubscriptionResource[];
    isLoading: boolean;
    revalidate: () => void;
};
export {};
